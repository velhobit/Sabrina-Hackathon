"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const child_process_1 = require("child_process");
const os = require("os");
const path = require("path");
const crossSpawn = require("cross-spawn");
const errors_1 = require("../errors");
const process_1 = require("../utils/process");
const streams_1 = require("../utils/streams");
exports.TILDE_PATH_REGEX = /^~($|\/|\\)/;
function expandTildePath(p) {
    const h = os.homedir();
    return p.replace(exports.TILDE_PATH_REGEX, `${h}$1`);
}
exports.expandTildePath = expandTildePath;
class ShellCommand {
    constructor(name, args, options = {}) {
        this.name = name;
        this.args = args;
        this._options = options;
    }
    get options() {
        const opts = this._options;
        if (!opts.env) {
            opts.env = process.env;
        }
        const PATH = typeof opts.env.PATH === 'string' ? opts.env.PATH : process.env.PATH;
        const env = process_1.createProcessEnv(opts.env || {}, {
            // Some people prefix path parts with tilde, e.g. `~/.bin`. The tilde is
            // expanded here because it's a bash character and won't work with Node's
            // `child_process` outside of a shell.
            PATH: PATH.split(path.delimiter).map(expandTildePath).join(path.delimiter),
        });
        return Object.assign({}, opts, { env });
    }
    output() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this._options.stdio = 'pipe';
            const promise = this.run();
            const stdoutBuf = new streams_1.WritableStreamBuffer();
            const stderrBuf = new streams_1.WritableStreamBuffer();
            const combinedBuf = new streams_1.WritableStreamBuffer();
            promise.p.stdout.pipe(stdoutBuf);
            promise.p.stdout.pipe(combinedBuf);
            promise.p.stderr.pipe(stderrBuf);
            promise.p.stderr.pipe(combinedBuf);
            try {
                yield promise;
            }
            catch (e) {
                stdoutBuf.end();
                stderrBuf.end();
                e.output = combinedBuf.consume().toString();
                throw e;
            }
            stderrBuf.end();
            combinedBuf.end();
            return stdoutBuf.consume().toString();
        });
    }
    combinedOutput() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this._options.stdio = 'pipe';
            const promise = this.run();
            const buf = new streams_1.WritableStreamBuffer();
            promise.p.stdout.pipe(buf);
            promise.p.stderr.pipe(buf);
            try {
                yield promise;
            }
            catch (e) {
                e.output = buf.consume().toString();
                throw e;
            }
            return buf.consume().toString();
        });
    }
    run() {
        const p = this.spawn();
        const promise = new Promise((resolve, reject) => {
            p.on('error', (error) => {
                let err;
                if (error.code === 'ENOENT') {
                    err = new errors_1.ShellCommandError('Command not found.');
                    err.code = errors_1.ERROR_SHELL_COMMAND_NOT_FOUND;
                }
                else {
                    err = new errors_1.ShellCommandError('Command error.');
                }
                err.error = error;
                reject(err);
            });
            p.on('close', (code, signal) => {
                if (code === 0) {
                    resolve();
                }
                else {
                    const err = new errors_1.ShellCommandError('Non-zero exit from subprocess.');
                    err.code = errors_1.ERROR_SHELL_NON_ZERO_EXIT;
                    err.exitCode = code;
                    err.signal = signal ? signal : undefined;
                    reject(err);
                }
            });
        });
        Object.defineProperties(promise, {
            p: { value: p },
        });
        return promise;
    }
    spawn() {
        return spawn(this.name, this.args, this.options);
    }
    bashify() {
        return (`${this.name} ` +
            (this.args.length > 0
                ? this.args.map(arg => arg.includes(' ') ? `"${arg.replace(/\"/g, '\\"')}"` : arg).join(' ')
                : ''));
    }
}
exports.ShellCommand = ShellCommand;
function spawn(command, args = [], options) {
    return crossSpawn(command, [...args], options);
}
exports.spawn = spawn;
function fork(modulePath, args = [], options = {}) {
    return child_process_1.fork(modulePath, [...args], options);
}
exports.fork = fork;
