export declare function conform<T>(t?: T | T[]): T[];
export declare function concurrentFilter<T>(array: T[], callback: (currentValue: T) => Promise<boolean>): Promise<T[]>;
export declare function filter<T>(array: T[], callback: (currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => Promise<boolean>): Promise<T[]>;
export declare function filter<T>(array: ReadonlyArray<T>, callback: (currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => Promise<boolean>): Promise<ReadonlyArray<T>>;
export declare function map<T, U>(array: T[], callback: (currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => Promise<U>): Promise<U[]>;
export declare function map<T, U>(array: T[], callback: (currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => Promise<U>): Promise<ReadonlyArray<U>>;
export declare function map<T, U>(array: ReadonlyArray<T>, callback: (currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => Promise<U>): Promise<U[]>;
export declare function map<T, U>(array: ReadonlyArray<T>, callback: (currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => Promise<U>): Promise<ReadonlyArray<U>>;
export declare function reduce<T>(array: T[], callback: (accumulator: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => Promise<T>): Promise<T>;
export declare function reduce<T>(array: T[], callback: (accumulator: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => Promise<T>, initialValue: T): Promise<T>;
export declare function reduce<T, U>(array: T[], callback: (accumulator: U, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => Promise<U>, initialValue: U): Promise<U>;
export declare function reduce<T>(array: ReadonlyArray<T>, callback: (accumulator: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => Promise<T>): Promise<T>;
export declare function reduce<T>(array: ReadonlyArray<T>, callback: (accumulator: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => Promise<T>, initialValue: T): Promise<T>;
export declare function reduce<T, U>(array: ReadonlyArray<T>, callback: (accumulator: U, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => Promise<U>, initialValue: U): Promise<U>;
