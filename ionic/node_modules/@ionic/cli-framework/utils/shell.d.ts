/// <reference types="node" />
import { ChildProcess, ForkOptions, SpawnOptions } from 'child_process';
export declare const TILDE_PATH_REGEX: RegExp;
export declare function expandTildePath(p: string): string;
export interface ShellCommandOptions extends SpawnOptions {
}
export declare class ShellCommand {
    name: string;
    args: ReadonlyArray<string>;
    protected _options: SpawnOptions;
    constructor(name: string, args: ReadonlyArray<string>, options?: ShellCommandOptions);
    readonly options: Readonly<SpawnOptions>;
    output(): Promise<string>;
    combinedOutput(): Promise<string>;
    run(): Promise<void> & {
        p: ChildProcess;
    };
    spawn(): ChildProcess;
    bashify(): string;
}
export declare function spawn(command: string, args?: ReadonlyArray<string>, options?: SpawnOptions): ChildProcess;
export declare function fork(modulePath: string, args?: ReadonlyArray<string>, options?: ForkOptions & Pick<SpawnOptions, 'stdio'>): ChildProcess;
