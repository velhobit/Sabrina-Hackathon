"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Debug = require("debug");
const lodash = require("lodash");
const kill = require("tree-kill");
const object_1 = require("./object");
const debug = Debug('ionic:cli-framework:utils:process');
exports.ERROR_TIMEOUT_REACHED = 'TIMEOUT_REACHED';
function killProcessTree(pid, signal = 'SIGTERM') {
    return new Promise((resolve, reject) => {
        kill(pid, signal, err => {
            if (err) {
                debug('error while killing process tree for %d: %O', pid, err);
                return reject(err);
            }
            resolve();
        });
    });
}
exports.killProcessTree = killProcessTree;
/**
 * Creates an alternative implementation of `process.env` object.
 *
 * On Windows, `process.env` is a magic object that offers case-insensitive
 * environment variable access. On other platforms, case sensitivity matters.
 * This method creates an empty "`process.env`" object type that works for all
 * platforms.
 */
function createProcessEnv(...sources) {
    return lodash.assign(process.platform === 'win32' ? object_1.createCaseInsensitiveObject() : {}, ...sources);
}
exports.createProcessEnv = createProcessEnv;
/**
 * Resolves when the given amount of milliseconds has passed.
 */
function sleep(ms) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return new Promise(resolve => {
            setTimeout(resolve, ms);
        });
    });
}
exports.sleep = sleep;
/**
 * Resolves when a given predicate is true or a timeout is reached.
 *
 * Configure `interval` to set how often the `predicate` is called.
 *
 * By default, `timeout` is Infinity. If given a value (in ms), and that
 * timeout value is reached, this function will reject with
 * the `ERROR_TIMEOUT_REACHED` error.
 */
function sleepUntil(predicate, { interval = 30, timeout = Infinity }) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let ms = 0;
        while (!predicate()) {
            yield sleep(interval);
            ms += interval;
            if (ms > timeout) {
                throw exports.ERROR_TIMEOUT_REACHED;
            }
        }
    });
}
exports.sleepUntil = sleepUntil;
/**
 * Never resolves.
 */
function sleepForever() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return new Promise(() => { });
    });
}
exports.sleepForever = sleepForever;
/**
 * Register a synchronous function to be called once the process exits.
 */
function onExit(fn) {
    process.on('exit', () => {
        debug('onExit: process.exit/normal shutdown');
        fn();
    });
}
exports.onExit = onExit;
const exitQueue = [];
/**
 * Register an asynchronous function to be called when the process wants to
 * exit.
 *
 * A handler will be registered for the 'SIGINT', 'SIGTERM', 'SIGHUP',
 * 'SIGBREAK' signals. If any of the signal events is emitted, `fn` will be
 * called exactly once, awaited upon, and then the process will exit when the
 * queue of functions is empty.
 */
function onBeforeExit(fn) {
    exitQueue.push(fn);
}
exports.onBeforeExit = onBeforeExit;
/**
 * Remove a function that was registered with `onBeforeExit`.
 */
function offBeforeExit(fn) {
    lodash.pull(exitQueue, fn);
}
exports.offBeforeExit = offBeforeExit;
const BEFORE_EXIT_SIGNALS = ['SIGINT', 'SIGTERM', 'SIGHUP', 'SIGBREAK'];
const beforeExitHandlerWrapper = (signal) => lodash.once(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
    debug(`onBeforeExit handler: ${signal} received`);
    debug(`onBeforeExit handler: running ${exitQueue.length} queued functions`);
    for (const [i, fn] of exitQueue.entries()) {
        try {
            yield fn();
        }
        catch (e) {
            debug('Error from function %d in exit queue: %O', i, e);
        }
    }
    debug(`onBeforeExit handler: exiting (exit code ${process.exitCode ? process.exitCode : 0})`);
    process.exit();
}));
for (const signal of BEFORE_EXIT_SIGNALS) {
    process.on(signal, beforeExitHandlerWrapper(signal));
}
const processExitHandler = beforeExitHandlerWrapper('process.exit');
/**
 * Asynchronous `process.exit()`, for running functions registered with
 * `onBeforeExit`.
 */
function processExit(exitCode = 0) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        process.exitCode = exitCode;
        yield processExitHandler();
    });
}
exports.processExit = processExit;
