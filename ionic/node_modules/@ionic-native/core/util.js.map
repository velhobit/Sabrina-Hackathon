{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../src/@ionic-native/core/util.ts"],"names":[],"mappings":";;;AAKA,MAAM,CAAC,IAAM,GAAG,GAAG,UAAC,OAAyB,EAAE,IAAY;IACzD,IAAM,KAAK,GAAa,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACxC,IAAI,GAAG,GAAQ,OAAO,CAAC;IACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAC9C,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,IAAI,CAAC;SACb;QACD,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KACrB;IACD,MAAM,CAAC,GAAG,CAAC;CACZ,CAAC;;;;AAKF,MAAM,CAAC,IAAM,UAAU,GAAG,UAAC,QAAkB;IAC3C,IAAM,gBAAgB,GAAG;QACvB,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBACjC,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;aAC3B,CAAC,CAAC;SACJ;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,KAAK,CACX,0LAA0L,CAC3L,CAAC;SACH;KACF,CAAC;IAEF,MAAM,CAAC,gBAAgB,EAAE,CAAC;CAC3B,CAAC;;;;;;AAOF,MAAM,CAAC,IAAM,SAAS,GAAG,UAAC,SAAiB;IACzC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;CAC/B,CAAC;;;;AAKF,MAAM,CAAC,IAAM,UAAU,GAAG,UACxB,UAAkB,EAClB,MAAe,EACf,MAAe;IAEf,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACX,OAAO,CAAC,IAAI,CACV,8BAA8B;YAC5B,UAAU;YACV,GAAG;YACH,MAAM;YACN,YAAY;YACZ,UAAU;YACV,2BAA2B,CAC9B,CAAC;KACH;IAAC,IAAI,CAAC,CAAC;QACN,OAAO,CAAC,IAAI,CACV,wCAAsC,UAAU,oCAAiC,CAClF,CAAC;KACH;IACD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACX,OAAO,CAAC,IAAI,CACV,iBAAe,UAAU,2CAAsC,MAAM,MAAG,CACzE,CAAC;KACH;CACF,CAAC;;;;;;AAOF,MAAM,CAAC,IAAM,WAAW,GAAG,UAAC,UAAkB,EAAE,MAAe;IAC7D,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACX,OAAO,CAAC,IAAI,CACV,8BAA8B;YAC5B,UAAU;YACV,GAAG;YACH,MAAM;YACN,gIAAgI,CACnI,CAAC;KACH;IAAC,IAAI,CAAC,CAAC;QACN,OAAO,CAAC,IAAI,CACV,8BAA8B;YAC5B,UAAU;YACV,sIAAsI,CACzI,CAAC;KACH;CACF,CAAC","sourcesContent":["declare const window: any;\n\n/**\n * @private\n */\nexport const get = (element: Element | Window, path: string): any => {\n  const paths: string[] = path.split('.');\n  let obj: any = element;\n  for (let i: number = 0; i < paths.length; i++) {\n    if (!obj) {\n      return null;\n    }\n    obj = obj[paths[i]];\n  }\n  return obj;\n};\n\n/**\n * @private\n */\nexport const getPromise = (callback: Function): Promise<any> => {\n  const tryNativePromise = () => {\n    if (window.Promise) {\n      return new Promise((resolve, reject) => {\n        callback(resolve, reject);\n      });\n    } else {\n      console.error(\n        'No Promise support or polyfill found. To enable Ionic Native support, please add the es6-promise polyfill before this script, or run with a library like Angular or on a recent browser.'\n      );\n    }\n  };\n\n  return tryNativePromise();\n};\n\n/**\n * @private\n * @param pluginRef\n * @returns {null|*}\n */\nexport const getPlugin = (pluginRef: string): any => {\n  return get(window, pluginRef);\n};\n\n/**\n * @private\n */\nexport const pluginWarn = (\n  pluginName: string,\n  plugin?: string,\n  method?: string\n): void => {\n  if (method) {\n    console.warn(\n      'Ionic Native: tried calling ' +\n        pluginName +\n        '.' +\n        method +\n        ', but the ' +\n        pluginName +\n        ' plugin is not installed.'\n    );\n  } else {\n    console.warn(\n      `'Ionic Native: tried accessing the ${pluginName} plugin but it's not installed.`\n    );\n  }\n  if (plugin) {\n    console.warn(\n      `Install the ${pluginName} plugin: 'ionic cordova plugin add ${plugin}'`\n    );\n  }\n};\n\n/**\n * @private\n * @param pluginName\n * @param method\n */\nexport const cordovaWarn = (pluginName: string, method?: string): void => {\n  if (method) {\n    console.warn(\n      'Ionic Native: tried calling ' +\n        pluginName +\n        '.' +\n        method +\n        ', but Cordova is not available. Make sure to a) run in a real device or simulator and b) include cordova.js in your index.html'\n    );\n  } else {\n    console.warn(\n      'Native: tried accessing the ' +\n        pluginName +\n        ' plugin but Cordova is not available. Make sure to a) run in a real device or simulator and b) include cordova.js in your index.html'\n    );\n  }\n};\n"]}