{"version":3,"file":"decorators.js","sourceRoot":"","sources":["../../../src/@ionic-native/core/decorators.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs/Observable';\nimport { _throw } from 'rxjs/observable/throw';\n\nimport { checkAvailability, instanceAvailability, overrideFunction, wrap, wrapInstance } from './plugin';\nimport { getPlugin, getPromise } from './util';\n\nexport interface PluginConfig {\n  /**\n   * Plugin name, this should match the class name\n   */\n  pluginName: string;\n  /**\n   * Plugin NPM package name\n   */\n  plugin: string;\n  /**\n   * Plugin object reference\n   */\n  pluginRef?: string;\n  /**\n   * Github repository URL\n   */\n  repo?: string;\n  /**\n   * Custom install command\n   */\n  install?: string;\n  /**\n   * Available installation variables\n   */\n  installVariables?: string[];\n  /**\n   * Supported platforms\n   */\n  platforms?: string[];\n\n  [key: string]: any;\n}\n\nexport interface CordovaOptions {\n  destruct?: boolean;\n  /**\n   * Set to true if the wrapped method is a sync function\n   */\n  sync?: boolean;\n  /**\n   * Callback order. Set to reverse if the success/error callbacks are the first 2 arguments that the wrapped method takes.\n   */\n  callbackOrder?: 'reverse';\n  /**\n   * Callback style\n   */\n  callbackStyle?: 'node' | 'object';\n  /**\n   * Set a custom index for the success callback function. This doesn't work if callbackOrder or callbackStyle are set.\n   */\n  successIndex?: number;\n  /**\n   * Set a custom index for the error callback function. This doesn't work if callbackOrder or callbackStyle are set.\n   */\n  errorIndex?: number;\n  /**\n   * Success function property name. This must be set if callbackStyle is set to object.\n   */\n  successName?: string;\n  /**\n   * Error function property name. This must be set if callbackStyle is set to object.\n   */\n  errorName?: string;\n  /**\n   * Set to true to return an observable\n   */\n  observable?: boolean;\n  /**\n   * If observable is set to true, this can be set to a different function name that will cancel the observable.\n   */\n  clearFunction?: string;\n  /**\n   * This can be used if clearFunction is set. Set this to true to call the clearFunction with the same arguments used in the initial function.\n   */\n  clearWithArgs?: boolean;\n  /**\n   * Creates an observable that wraps a global event. Replaces document.addEventListener\n   */\n  eventObservable?: boolean;\n  /**\n   * Event name, this must be set if eventObservable is set to true\n   */\n  event?: string;\n  /**\n   * Element to attach the event listener to, this is optional, defaults to `window`\n   */\n  element?: any;\n  /**\n   * Set to true if the wrapped method returns a promise\n   */\n  otherPromise?: boolean;\n  /**\n   * Supported platforms\n   */\n  platforms?: string[];\n}\n\nexport interface CordovaCheckOptions {\n  sync?: boolean;\n  observable?: boolean;\n}\n\n/**\n * @private\n */\nexport function InstanceCheck(opts: CordovaCheckOptions = {}) {\n  return (\n    pluginObj: Object,\n    methodName: string,\n    descriptor: TypedPropertyDescriptor<any>\n  ): TypedPropertyDescriptor<any> => {\n    return {\n      value: function(...args: any[]): any {\n        if (instanceAvailability(this)) {\n          return descriptor.value.apply(this, args);\n        } else {\n          if (opts.sync) {\n            return;\n          } else if (opts.observable) {\n            return new Observable<any>(() => {});\n          }\n\n          return getPromise(() => {});\n        }\n      },\n      enumerable: true\n    };\n  };\n}\n\n/**\n * Executes function only if plugin is available\n * @private\n */\nexport function CordovaCheck(opts: CordovaCheckOptions = {}) {\n  return (\n    pluginObj: Object,\n    methodName: string,\n    descriptor: TypedPropertyDescriptor<any>\n  ): TypedPropertyDescriptor<any> => {\n    return {\n      value: function(...args: any[]): any {\n        const check = checkAvailability(pluginObj);\n        if (check === true) {\n          return descriptor.value.apply(this, args);\n        } else {\n          if (opts.sync) {\n            return null;\n          } else if (opts.observable) {\n            return _throw(new Error(check && check.error));\n          }\n          return Promise.reject(check && check.error);\n        }\n      },\n      enumerable: true\n    };\n  };\n}\n\n/**\n * @private\n *\n * Class decorator specifying Plugin metadata. Required for all plugins.\n *\n * @usage\n * ```typescript\n * @Plugin({\n *  pluginName: 'MyPlugin',\n *  plugin: 'cordova-plugin-myplugin',\n *  pluginRef: 'window.myplugin'\n *  })\n *  export class MyPlugin {\n *\n *    // Plugin wrappers, properties, and functions go here ...\n *\n *  }\n * ```\n */\nexport function Plugin(config: PluginConfig): ClassDecorator {\n  return function(cls: any) {\n    // Add these fields to the class\n    for (let prop in config) {\n      cls[prop] = config[prop];\n    }\n\n    cls['installed'] = function(printWarning?: boolean) {\n      return !!getPlugin(config.pluginRef);\n    };\n\n    cls['getPlugin'] = function() {\n      return getPlugin(config.pluginRef);\n    };\n\n    cls['checkInstall'] = function() {\n      return checkAvailability(cls) === true;\n    };\n\n    cls['getPluginName'] = function() {\n      return config.pluginName;\n    };\n\n    cls['getPluginRef'] = function() {\n      return config.pluginRef;\n    };\n\n    cls['getPluginInstallName'] = function() {\n      return config.plugin;\n    };\n\n    cls['getPluginRepo'] = function() {\n      return config.repo;\n    };\n\n    cls['getSupportedPlatforms'] = function() {\n      return config.platforms;\n    };\n\n    return cls;\n  };\n}\n\n/**\n * @private\n *\n * Wrap a stub function in a call to a Cordova plugin, checking if both Cordova\n * and the required plugin are installed.\n */\nexport function Cordova(opts: CordovaOptions = {}) {\n  return (\n    target: Object,\n    methodName: string,\n    descriptor: TypedPropertyDescriptor<any>\n  ) => {\n    return {\n      value: function(...args: any[]) {\n        return wrap(this, methodName, opts).apply(this, args);\n      },\n      enumerable: true\n    };\n  };\n}\n\n/**\n * @private\n *\n * Wrap an instance method\n */\nexport function CordovaInstance(opts: CordovaOptions = {}) {\n  return (target: Object, methodName: string) => {\n    return {\n      value: function(...args: any[]) {\n        return wrapInstance(this, methodName, opts).apply(this, args);\n      },\n      enumerable: true\n    };\n  };\n}\n\n/**\n * @private\n *\n *\n * Before calling the original method, ensure Cordova and the plugin are installed.\n */\nexport function CordovaProperty(target: any, key: string) {\n  Object.defineProperty(target, key, {\n    enumerable: true,\n    get: () => {\n      if (checkAvailability(target, key) === true) {\n        return getPlugin(target.constructor.getPluginRef())[key];\n      } else {\n        return null;\n      }\n    },\n    set: value => {\n      if (checkAvailability(target, key) === true) {\n        getPlugin(target.constructor.getPluginRef())[key] = value;\n      }\n    }\n  });\n}\n\n/**\n * @private\n * @param target\n * @param key\n * @constructor\n */\nexport function InstanceProperty(target: any, key: string) {\n  Object.defineProperty(target, key, {\n    enumerable: true,\n    get: function() {\n      return this._objectInstance[key];\n    },\n    set: function(value) {\n      this._objectInstance[key] = value;\n    }\n  });\n}\n\n/**\n * @private\n *\n * Wrap a stub function in a call to a Cordova plugin, checking if both Cordova\n * and the required plugin are installed.\n */\nexport function CordovaFunctionOverride(opts: any = {}) {\n  return (\n    target: Object,\n    methodName: string,\n    descriptor: TypedPropertyDescriptor<any>\n  ) => {\n    return {\n      value: function(...args: any[]) {\n        return overrideFunction(this, methodName, opts);\n      },\n      enumerable: true\n    };\n  };\n}\n"]}